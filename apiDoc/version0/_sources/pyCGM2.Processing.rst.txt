pyCGM2.Processing subpackage
=============================


pyCGM2.Processing.cycle (module)
---------------------------------

Basis Classes and functions
.............................

.. automodule:: pyCGM2.Processing.cycle
    :members: Cycle, GaitCycle, spatioTemporelParameter_descriptiveStats, point_descriptiveStats, analog_descriptiveStats
    :special-members: __init__

Cycle builder
.................

.. automodule:: pyCGM2.Processing.cycle
    :members: GaitCyclesBuilder
    :special-members: __init__

Cycle filter
.................

**Usage**

.. code:: python

    # from pyCGM2.Processing import cycle
    cycleBuilder = cycle.GaitCyclesBuilder(spatioTemporalTrials=kinematicTrials,
                                       kinematicTrials = kinematicTrials,
                                       kineticTrials = kineticTrials,
                                       emgTrials=None,
                                       longitudinal_axis= "X",lateral_axis="Y")

    cyclefilter = cycle.CyclesFilter()
    cyclefilter.setBuilder(cycleBuilder)
    cycles = cyclefilter.build()



.. automodule:: pyCGM2.Processing.cycle
    :members: CyclesFilter

.. _CyclesObject:

Cycle Built object
....................

.. automodule:: pyCGM2.Processing.cycle
    :members: Cycles



pyCGM2.Processing.analysis (module)
-----------------------------------

Analysis builder
.................

.. automodule:: pyCGM2.Processing.analysis
    :members: GaitAnalysisBuilder
    :special-members: __init__



Analysis Filter
.................

**Usage**

.. code:: python

    # from pyCGM2.Processing import cycle
    modelInfo={"type" : "cgm1"}
    subjectInfo={"firstname" : "Hannibal"}
    experimentalInfo={"task" : "spontaneous walk"}
    kinematicLabelsDict ={ 'Left': ["LHipAngles","LKneeAngles","LAnkleAngles","LFootProgressAngles","LPelvisAngles"]},
                           'Right': ["RHipAngles","RKneeAngles","RAnkleAngles","RFootProgressAngles","RPelvisAngles"] }

    kineticLabelsDict ={ 'Left': ["LHipMoment","LKneeMoment","LAnkleMoment", "LHipPower","LKneePower","LAnklePower"],
                    'Right': ["RHipMoment","RKneeMoment","RAnkleMoment", "RHipPower","RKneePower","RAnklePower"]}


    analysisBuilder = analysis.GaitAnalysisBuilder(cycles,
                                              kinematicLabelsDict = kinematicLabelsDict,
                                              kineticLabelsDict = kineticLabelsDict,
                                              subjectInfos=subjectInfo,
                                              modelInfos=modelInfo,
                                              experimentalInfos=experimentalInfo)

    analysisFilter = analysis.AnalysisFilter()
    analysisFilter.setBuilder(analysisBuilder)
    analysisFilter.build()


.. automodule:: pyCGM2.Processing.analysis
    :members: StaticAnalysisFilter, AnalysisFilter

.. _AnalysisObject:

Analysis built object
......................

.. automodule:: pyCGM2.Processing.analysis
    :members: Analysis,StaticAnalysis
